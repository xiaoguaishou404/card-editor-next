name: Docker Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REPOSITORY: ${{ secrets.DOCKER_USERNAME }}/card-editor-next

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REPOSITORY }}:latest
            ${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # 检查并安装 Docker
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              
              # 将当前用户添加到 docker 组
              sudo usermod -aG docker $USER
              
              # 启动 Docker 服务
              sudo systemctl start docker
              sudo systemctl enable docker
              
              # 创建 docker 组（如果不存在）
              sudo groupadd -f docker
              
              # 重新加载 docker 组
              newgrp docker
              
              # 修改 Docker socket 权限
              sudo chmod 666 /var/run/docker.sock
              
              # 等待 Docker 服务完全启动
              sleep 20
            fi

            # 检查并安装 Docker Compose
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
              sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose

              # 创建软链接
              sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi

            # 设置日志轮转
            echo '{
              "log-driver": "json-file",
              "log-opts": {
                "max-size": "10m",
                "max-file": "3"
              }
            }' | sudo tee /etc/docker/daemon.json

            # 重启 Docker 使配置生效
            sudo systemctl restart docker
            
            # 等待 Docker 重启完成
            sleep 10

            # 确保当前用户可以访问 Docker
            sudo chmod 666 /var/run/docker.sock

            # 创建应用目录
            mkdir -p ~/card-editor-project/nginx/conf.d
            cd ~/card-editor-project

            # 使用 sudo 停止并删除旧容器
            sudo docker-compose down || true
            sudo docker rm -f card-editor-next nginx-proxy || true
            sudo docker network rm card-editor-project_web-network || true

            # 创建 .env 文件
            echo "ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            NODE_ENV=production" > .env

            # 创建 docker-compose.yml
            echo "services:
              nginx:
                image: nginx:alpine
                container_name: nginx-proxy
                restart: always
                ports:
                  - '80:80'
                  - '443:443'
                volumes:
                  - ./nginx/conf.d:/etc/nginx/conf.d
                depends_on:
                  - card-editor
                networks:
                  - web-network

              card-editor:
                image: ${{ env.DOCKER_REPOSITORY }}:latest
                container_name: card-editor-next
                restart: always
                expose:
                  - 3000
                env_file:
                  - .env
                networks:
                  - web-network

            networks:
              web-network:
                driver: bridge" > docker-compose.yml

            # 创建 Nginx 配置
            echo "server {
                listen 80;
                server_name localhost;

                location / {
                    proxy_pass http://card-editor:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }" > nginx/conf.d/default.conf

            # 设置环境变量
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}

            # 清理未使用的镜像和网络
            sudo docker system prune -f

            # 拉取最新镜像并重启服务
            sudo docker-compose pull
            sudo docker-compose up -d

            # 等待服务启动
            sleep 10

            # 检查服务状态
            sudo docker-compose ps

            # 检查日志是否正常
            sudo docker-compose logs --tail=10

            # 创建定时任务清理旧日志和镜像
            (crontab -l 2>/dev/null; echo "0 0 * * * sudo docker system prune -f > /dev/null 2>&1") | crontab - 